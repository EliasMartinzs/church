generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          String    @id @default(cuid())
  email       String    @unique
  fullName    String?
  photoUrl    String?
  phone       String?
  isCompleted Boolean   @default(false)
  role        Role      @default(ADMIN)
  birthDate   DateTime?
  church      Church?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Secretary {
  id          String    @id @default(cuid())
  email       String    @unique
  fullName    String?
  photoUrl    String?
  phone       String?
  isCompleted Boolean   @default(false)
  role        Role      @default(SECRETARY)
  birthDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cell        Cell?
  church      Church?   @relation(fields: [churchId], references: [id], onDelete: Cascade)
  churchId    String?
}

model Member {
  id             String          @id @default(cuid())
  email          String          @unique
  fullName       String?
  photoUrl       String?
  phone          String?
  isCompleted    Boolean         @default(false)
  role           Role            @default(MEMBER)
  birthDate      DateTime?
  attendanceRate Float           @default(0)
  prayerRequest  PrayerRequest[]
  church         Church?         @relation(fields: [churchId], references: [id])
  churchId       String?
  cell           Cell?           @relation(fields: [cellId], references: [id], onDelete: Cascade)
  cellId         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Church {
  id                String           @id @default(cuid())
  name              String
  address           String?
  photoUrl          String?
  description       String?
  admin             Admin            @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId           String           @unique
  churchStatistics  ChurchStatistics @relation(fields: [churchStatiticsId], references: [id], onDelete: Cascade)
  churchStatiticsId String           @unique
  members           Member[]
  cells             Cell[]
  secretaries       Secretary[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Cell {
  id             String          @id @default(cuid())
  name           String
  description    String?
  church         Church          @relation(fields: [churchId], references: [id], onDelete: Cascade)
  churchId       String
  photoUrl       String?
  members        Member[]
  prayerRequests PrayerRequest[]
  secretary      Secretary?      @relation(fields: [secretaryId], references: [id], onDelete: Cascade)
  secretaryId    String?         @unique
  meetings       Meeting[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Meeting {
  id           String            @id @default(cuid())
  title        String
  description  String?
  date         DateTime
  startTime    String
  endTime      String
  location     String
  host         String
  status       MeetingStatus     @default(PENDING)
  reminder     Int?
  cell         Cell?             @relation(fields: [cellId], references: [id], onDelete: Cascade)
  cellId       String?
  participants MeetingResponse[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model MeetingResponse {
  id         String           @id @default(cuid())
  memberId   String
  attendance AttendanceStatus @default(NOT_ATTENDING)
  meeting    Meeting          @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId  String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model ChurchStatistics {
  id            String   @id @default(cuid())
  totalMembers  Int      @default(0)
  totalCells    Int      @default(0)
  totalMeetings Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  church        Church?
}

enum Role {
  ADMIN
  SECRETARY
  MEMBER
}

enum AttendanceStatus {
  ATTENDING
  NOT_ATTENDING
  MAYBE
}

enum MeetingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model PrayerRequest {
  id          String         @id @default(cuid())
  title       String
  description String
  status      PrayerStatus   @default(PENDING)
  isAnswered  Boolean        @default(false)
  answeredAt  DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  member      Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String
  category    PrayerCategory
  churchId    String
  cell        Cell?          @relation(fields: [cellId], references: [id], onDelete: Cascade)
  cellId      String?
}

enum PrayerCategory {
  HEALING
  GUIDANCE
  PROVISION
  RELATIONSHIPS
  SPIRITUAL_GROWTH
  COMMUNITY
  WORLD_PEACE
  PERSONAL
  THANKSGIVING
}

model PrayerStatistics {
  id            String   @id @default(cuid())
  totalRequests Int      @default(0)
  answered      Int      @default(0)
  notAnswered   Int      @default(0)
  churchId      String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum PrayerStatus {
  PENDING
  ANSWERED
  IGNORED
  IN_PROGRESS
}
